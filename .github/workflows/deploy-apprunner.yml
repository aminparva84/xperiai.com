name: Deploy Xperi AI to AWS App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: xperiai-app
  SERVICE_NAME: xperiai-app
  ACCOUNT_ID: 047719663270
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --image-scanning-configuration scanOnPush=true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Tagging as latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "latest_image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    - name: Force new deployment
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
        SERVICE_ARN: arn:aws:apprunner:${{ env.AWS_REGION }}:${{ env.ACCOUNT_ID }}:service/${{ env.SERVICE_NAME }}
      run: |
        echo "Image pushed: $IMAGE_URI"
        echo "Service ARN: $SERVICE_ARN"
        echo ""
        echo "App Runner will automatically detect the new image and deploy"
        echo "since auto-deploy is enabled."

    - name: Check deployment status
      run: |
        echo "Waiting for App Runner to pull new image..."
        sleep 30
        aws apprunner describe-service \
          --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:${{ env.ACCOUNT_ID }}:service/${{ env.SERVICE_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Service.[Status,ServiceUrl]' \
          --output table

